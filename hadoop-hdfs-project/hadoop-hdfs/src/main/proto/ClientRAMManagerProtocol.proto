/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * These .proto interfaces are private and stable.
 * Please see http://wiki.apache.org/hadoop/Compatibility
 * for what changes are allowed for a *stable* .proto interface.
 */

// This file contains protocol buffers that are used throughout the cluster -- i.e.
// by the client, server, and data transfer protocols.

option java_package = "org.apache.hadoop.hdfs.protocol.proto";
option java_outer_classname = "ClientRAMManagerProtocolProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package hadoop.hdfs;

import "Security.proto";
import "hdfs.proto";

/**
 * void request
 */
  message RefreshRAMManagernodesRequestProto {
  }

/**
 * void response
 */
  message RefreshRAMManagernodesResponseProto {
  }

/**
 * blocks - list of ExtendedBlocks on which we are querying additional info
 * tokens - list of access tokens corresponding to list of ExtendedBlocks
 */
/*
message GetHdfsBlockLocationsRequestProto {
  repeated ExtendedBlockProto blocks = 1;
  repeated hadoop.common.TokenProto tokens = 2;
}
*/

/**
 * volumeIds - id of each volume, potentially multiple bytes
 * volumeIndexes - for each block, an index into volumeIds specifying the volume
 *               on which it is located. If block is not present on any volume,
 *               index is set to MAX_INT.
 */
/*
message GetHdfsBlockLocationsResponseProto {
  repeated bytes volumeIds = 1;
  repeated uint32 volumeIndexes = 2;
}
*/

/**
 * Protocol used from client to the RAMManager.
 * See the request and response for details of rpc call.
 */
service ClientRAMManagerProtocolService {
  /**
   * Refresh the list of federated namenodes from updated configuration.
   * Adds new namenodes and stops the deleted namenodes.
   */
  rpc refreshRAMManagerNodes(RefreshRAMManagernodesRequestProto)
      returns(RefreshRAMManagernodesResponseProto);

  /**
   * Retrieve additional HDFS-specific metadata about a set of blocks stored
   * on the local file system.
   */
  // rpc getHdfsBlockLocations(GetHdfsBlockLocationsRequestProto)
  //    returns(GetHdfsBlockLocationsResponseProto);
}
